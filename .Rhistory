notch=FALSE)
bp <- ggplot(cardio_clean, aes(y=blood_pressure)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
ggarrange(a,h,w,i,sbp,dbp,bp, ncol = 2)
cat("La edad minima es :", min(cardio_clean$age),"\n")
cat("La edad maxima es :", max(cardio_clean$age),"\n")
cardio_clean$group_age <- cut(cardio_clean$age,
breaks = c(18,35,55,Inf),
labels = c("Adulto Joven", "Adulto", "Senior"))
cardio_clean$group_height <- cut(cardio_clean$height,
breaks = c(-Inf,150,165,180,195,Inf),
labels = c("(-Inf, 150)", "(151, 165)",
"(166, 180)", "(181, 195)",
"(196, Inf)"))
# Vemos los mínimo y máximo de la variable
cat("El peso minimo es :", min(cardio_clean$weight),"\n")
cat("El peso máximo es :", max(cardio_clean$weight),"\n")
cardio_clean$group_weight <- cut(cardio_clean$weight,
breaks = c(-Inf,80,120,160,Inf),
labels = c("(-Inf, 80)", "(81, 120)",
"(121, 160)", "(161, Inf)"))
cardio_clean$group_imc <- cut(cardio_clean$imc,
breaks = c(-Inf,18.5,24.9,29.9,Inf),
labels = c("Peso inferior al normal",
"Peso normal", "Sobrepeso",
"Obesidad"))
# Discretizamos la variable que acabamos de crear
cardio_clean$hypertension <- cut(cardio_clean$diastolic_blood_pressure,
breaks = c(-Inf,((90+2*60)/3),
((120+2*80)/3),
((139+2*89)/3), Inf),
labels = c("Tensión baja",
"Presión arterial normal",
"Presión arterial normal-alta",
"Hipertensión"))
ga <- ggplot(cardio_clean, aes(group_age)) + geom_bar(fill='grey') +
xlab("Edad Discretizada")
gh <- ggplot(cardio_clean, aes(group_height)) + geom_bar(fill='blue') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Altura Discretizada")
gw <- ggplot(cardio_clean, aes(group_weight)) + geom_bar(fill='pink') +
xlab("Peso Discretizada")
gi <- ggplot(cardio_clean, aes(group_imc)) + geom_bar(fill='lightblue') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("IMC Discretizada")
ghy <- ggplot(cardio_clean, aes(hypertension)) + geom_bar(fill='green') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Hipertensión Discretizada")
ge <- ggplot(cardio_clean, aes(gender)) + geom_bar(fill='cadetblue3') +
xlab("Género")
ch <- ggplot(cardio_clean, aes(cholesterol)) + geom_bar(fill='red') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Colesterol")
gl <- ggplot(cardio_clean, aes(glucose)) + geom_bar(fill='purple') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Glucosa")
sm <- ggplot(cardio_clean, aes(smoking)) + geom_bar(fill='yellow') +
xlab("Fumador")
ai <- ggplot(cardio_clean, aes(alcohol_intake)) + geom_bar(fill='brown') +
xlab("Ingesta de alcohol")
pa <- ggplot(cardio_clean, aes(physical_activity)) + geom_bar(fill='orange') +
xlab("Actividad física")
# Variable objetivo
cd <- ggplot(cardio_clean, aes(cardiovascular_disease)) +
geom_bar(fill='aquamarine4') +
xlab("Enfermedad Cardiovascular")
ggarrange(ga,gh,gw,gi,ghy,ge,ch,gl,sm,ai,pa,cd, ncol = 2)
# Establecemos el valor por defecto de alpha
alpha = 0.05
col.names = colnames(cardio_clean)
for (i in 1:ncol(cardio_clean)) {
if (i == 1) cat("Variables que no siguen una distribución normal:\n")
if (is.integer(cardio_clean[,i]) | is.numeric(cardio_clean[,i])) {
# Como nuestro conjunto de datos es grande, utilizaremos la prueba de
# Kolmogorov-Simirnov
p_val = lillie.test(cardio_clean[,i])$p.value
if (p_val < alpha) {
cat(col.names[i])
# Establecemos cómo queremos ver la salida que muestra el bucle
if (i < ncol(cardio_clean) - 1) cat(", ")
if (i %% 3 == 0) cat("\n")
}
}
}
# Prueba para las variables blood_pressure y group_imc
fligner.test(imc ~ group_imc, data = cardio_clean)
var.test(cardio_clean$imc[cardio_clean$gender=="Mujer"],
cardio_clean$imc[cardio_clean$gender=="Hombre"],
alternative = "two.sided", conf.level = 0.95)
t.test(cardio_clean$imc[cardio_clean$gender=="Mujer"],
cardio_clean$imc[cardio_clean$gender=="Hombre"],
alternative="two.sided", var.equal=FALSE, conf.level = 0.95)
t.test(cardio_clean$imc[cardio_clean$gender=="Hombre"],
cardio_clean$imc[cardio_clean$gender=="Mujer"],
alternative="greater", var.equal=FALSE, conf.level = 0.95)
var.test(cardio_clean$blood_pressure[
cardio_clean$cardiovascular_disease=="Sí"],
cardio_clean$blood_pressure[
cardio_clean$cardiovascular_disease=="No"],
alternative = "two.sided", conf.level = 0.95)
t.test(cardio_clean$blood_pressure[cardio_clean$cardiovascular_disease=="Sí"],
cardio_clean$blood_pressure[cardio_clean$cardiovascular_disease=="No"],
alternative="greater", var.equal=FALSE, conf.level = 0.95)
# Elegimos 2/3 para el conjunto de entrenamiento
smp_size <- floor(2/3 * nrow(cardio_clean))
# Establecemos la semilla  para que el ejemplo sea reproducible
set.seed(222)
train_ind <- sample(seq_len(nrow(cardio_clean)), size = smp_size)
# Establecemos lo conjuntos de entrenamiento y prueba
cardio_train <- cardio_clean[train_ind, ]
cardio_test <- cardio_clean[-train_ind, ]
lm1 <- lm(cardiovascular_disease~age, data=cardio_train)
lm2 <- lm(cardiovascular_disease~age+gender, data=cardio_train)
lm3 <- lm(fcardiovascular_disease~age+gender+smoking, data=cardio_train)
lm1 <- lm(cardiovascular_disease~age, data=cardio_train)
lm2 <- lm(cardiovascular_disease~age+gender, data=cardio_train)
lm3 <- lm(cardiovascular_disease~age+gender+smoking, data=cardio_train)
library(performance)
comp <- compare_performance(lm1, lm2)
library(performance)
(comp <- compare_performance(lm1, lm2))
plot(comp)
install.packages("see")
library(performance)
comp <- compare_performance(lm1, lm2, lm3)
comp
lm1 <- lm(cardiovascular_disease~age, data=cardio_clean)
lm2 <- lm(cardiovascular_disease~age+gender, data=cardio_clean)
lm3 <- lm(cardiovascular_disease~age+gender+smoking, data=cardio_clean)
lm1 <- lm(cardiovascular_disease~age, data=cardio_clean)
lm2 <- lm(cardiovascular_disease~age+height, data=cardio_clean)
lm3 <- lm(cardiovascular_disease~age+height+weight, data=cardio_clean)
library(performance)
comp <- compare_performance(lm1, lm2, lm3)
comp
library(see)
plot(comp)
lm1 <- lm(age~cardiovascular_disease, data=cardio_clean)
lm2 <- lm(cardiovascular_disease~age+height, data=cardio_clean)
lm3 <- lm(cardiovascular_disease~age+height+weight, data=cardio_clean)
library(performance)
comp <- compare_performance(lm1, lm2, lm3)
comp
lm1 <- lm(age~cardiovascular_disease, data=cardio_clean)
lm2 <- lm(age~cardiovascular_disease+height, data=cardio_clean)
lm3 <- lm(age~cardiovascular_disease+height+weight, data=cardio_clean)
library(performance)
comp <- compare_performance(lm1, lm2, lm3)
comp
library(see)
plot(comp)
lm1 <- lm(age~cardiovascular_disease, data=cardio_train)
lm2 <- lm(age~cardiovascular_disease+height, data=cardio_train)
lm3 <- lm(age~cardiovascular_disease+height+weight, data=cardio_train)
lm3 <- lm(age~cardiovascular_disease+smocking+height+weight, data=cardio_train)
# Indicamos que todos los chunk se oculten
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el workspace, por si hubiera algun dataset o informacion cargada
rm(list = ls())
# Limpiamos la consola
cat("\014")
# Indicamos el directorio de trabajo
#setwd("C:\Users\alrop\Desktop\Máster Ciencia de datos UOC\Semestre 2\Tipología y ciclo de vida de los datos\Bloque 3 - Limpieza y análisis de datos\PRA2")
# source("loadPackages.R")
#packages <- c("ggplot2", "ggpubr","readr", "plotly", "tidyverse", "lubridate","magrittr","funModeling","skrim","dplyr","nortest", "caret", "rpart","rpart.plot","pROC","ROCR")
packages <- c("readr", "ggplot2", "dplyr", "tidyverse", "skimr", "funModeling", "ggpubr", "plotly", "nortest", "caret", "e1071", "pROC", "rpart", "rpart.plot", "ROCR")
new <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new)) install.packages(new)
a=lapply(packages, require, character.only=TRUE)
cardio <- read.csv('data/cardio_train.csv', sep = ';', header = FALSE, skip = 1)
# Le damos nombre a las variables para una mejor compresión que los que vienen
# por defecto
colnames(cardio) <-c('id', 'age', 'gender', 'height', 'weight',
'systolic_blood_pressure', 'diastolic_blood_pressure',
'cholesterol', 'glucose', 'smoking', 'alcohol_intake',
'physical_activity', 'cardiovascular_disease')
# Dimensiones del conjunto de datos
dim(cardio)
# Clases de las variables y valores de las primeras observaciones
str(cardio)
# Resumen de las estadísticas principales de las variables
summary(cardio)
# Resumen general
skimr::skim(cardio)
# Ver zeros, NA, dtype y unique
funModeling::status(cardio)
cardio$gender <- ifelse(cardio$gender == 1, 'Mujer', 'Hombre')
cardio$gender <- as.factor(cardio$gender)
cardio$smoking <- ifelse(cardio$smoking == 0, 'No', 'Sí')
cardio$smoking <- as.factor(cardio$smoking)
cardio$alcohol_intake <- ifelse(cardio$alcohol_intake == 0, 'No', 'Sí')
cardio$alcohol_intake <- as.factor(cardio$alcohol_intake)
cardio$physical_activity <- ifelse(cardio$physical_activity == 0, 'No', 'Sí')
cardio$physical_activity <- as.factor(cardio$physical_activity)
cardio$cardiovascular_disease <- ifelse(cardio$cardiovascular_disease == 0,
'No', 'Sí')
cardio$cardiovascular_disease <- as.factor(cardio$cardiovascular_disease)
# library(dplyr)
cardio$cholesterol <- as.factor(cardio$cholesterol)
cardio$cholesterol <- recode_factor(cardio$cholesterol, '1' = "Normal",
'2' = "Por encima de lo normal",
'3' = "Muy por encima de lo normal")
cardio$glucose <- as.factor(cardio$glucose)
cardio$glucose <- recode_factor(cardio$glucose, '1' = "Normal",
'2' = "Por encima de lo normal",
'3' = "Muy por encima de lo normal")
# Cambiamos la edad de los pacientes de días a años
cardio$age <- trunc(cardio$age/365)
cardio <- cardio[, -1]
colSums(is.na(cardio))
colSums(cardio=="")
# Guardamos los boxplots en variables
a <- ggplot(cardio, aes(y=age)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
h <- ggplot(cardio, aes(y=height)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
w <- ggplot(cardio, aes(y=weight)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
sbp <- ggplot(cardio, aes(y=systolic_blood_pressure)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
dbp <- ggplot(cardio, aes(y=diastolic_blood_pressure)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
# Graficamos los boxplots en un mismo layout
ggpubr::ggarrange(a,h,w,sbp,dbp, ncol = 2)
fig <- plot_ly(cardio, x = ~age, y = ~height, color = ~gender, type = "box")
fig <- fig %>% layout(boxmode = "group")
fig
fig <- plot_ly(cardio, x = ~gender, y = ~height, color = ~cholesterol, type = "box")
fig <- fig %>% layout(boxmode = "group")
fig
# Creamos la variable
cardio$imc <- (cardio$weight)/((cardio$height)/100)^2
# Creamos un nuevo dataset en el que borramos las observaciones donde el IMC
# sea menor que 18.
cardio_clean <- cardio[!(cardio$imc < 15),]
min(cardio_clean$height)
max(cardio_clean$height)
cardio_clean <- cardio_clean[!(cardio_clean[, "height"] < 145
& cardio_clean[, "gender"] == 'Hombre'), ]
cardio_clean <- cardio_clean[!(cardio_clean[, "height"] < 136
& cardio_clean[, "gender"] == 'Mujer'), ]
cat("El valor mínimo de 'systolic_blood_pressure' es :",min(cardio$systolic_blood_pressure),"\n")
cat("El valor mínimo de 'diastolic_blood_pressure' es :",min(cardio$diastolic_blood_pressure),"\n")
cat("El valor máximo de 'systolic_blood_pressure' es :",max(cardio$systolic_blood_pressure),"\n")
cat("El valor máximo de 'diastolic_blood_pressure' es :",max(cardio$diastolic_blood_pressure),"\n")
# Creamos la variable PAM
cardio_clean$blood_pressure <- (cardio_clean$systolic_blood_pressure +
2*cardio_clean$diastolic_blood_pressure)/3
# Eliminamos las observaciones que no nos interesan
cardio_clean <- cardio_clean[!(
cardio_clean[,"systolic_blood_pressure"] < 60), ]
cardio_clean <- cardio_clean[!(
cardio_clean[,"systolic_blood_pressure"] > 220), ]
cardio_clean <- cardio_clean[!(
cardio_clean[,"diastolic_blood_pressure"] < 30), ]
cardio_clean <- cardio_clean[!(
cardio_clean[,"diastolic_blood_pressure"] > 160), ]
cardio_clean <- cardio_clean[!(cardio_clean[, "blood_pressure"] > 250), ]
cardio_clean <- cardio_clean[!(cardio_clean[, "blood_pressure"] < 40), ]
cardio_clean <- cardio_clean[!(cardio_clean[, "blood_pressure"] > 250), ]
a <- ggplot(cardio_clean, aes(y=age)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
h <- ggplot(cardio_clean, aes(y=height)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
w <- ggplot(cardio_clean, aes(y=weight)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
sbp <- ggplot(cardio_clean, aes(y=systolic_blood_pressure)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
dbp <- ggplot(cardio_clean, aes(y=diastolic_blood_pressure)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
i <- ggplot(cardio_clean, aes(y=imc)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
bp <- ggplot(cardio_clean, aes(y=blood_pressure)) +
geom_boxplot(outlier.colour="black",outlier.shape=16,outlier.size=2,
notch=FALSE)
ggarrange(a,h,w,i,sbp,dbp,bp, ncol = 2)
cat("La edad minima es :", min(cardio_clean$age),"\n")
cat("La edad maxima es :", max(cardio_clean$age),"\n")
cardio_clean$group_age <- cut(cardio_clean$age,
breaks = c(18,35,55,Inf),
labels = c("Adulto Joven", "Adulto", "Senior"))
cardio_clean$group_height <- cut(cardio_clean$height,
breaks = c(-Inf,150,165,180,195,Inf),
labels = c("(-Inf, 150)", "(151, 165)",
"(166, 180)", "(181, 195)",
"(196, Inf)"))
# Vemos los mínimo y máximo de la variable
cat("El peso minimo es :", min(cardio_clean$weight),"\n")
cat("El peso máximo es :", max(cardio_clean$weight),"\n")
cardio_clean$group_weight <- cut(cardio_clean$weight,
breaks = c(-Inf,80,120,160,Inf),
labels = c("(-Inf, 80)", "(81, 120)",
"(121, 160)", "(161, Inf)"))
cardio_clean$group_imc <- cut(cardio_clean$imc,
breaks = c(-Inf,18.5,24.9,29.9,Inf),
labels = c("Peso inferior al normal",
"Peso normal", "Sobrepeso",
"Obesidad"))
# Discretizamos la variable que acabamos de crear
cardio_clean$hypertension <- cut(cardio_clean$diastolic_blood_pressure,
breaks = c(-Inf,((90+2*60)/3),
((120+2*80)/3),
((139+2*89)/3), Inf),
labels = c("Tensión baja",
"Presión arterial normal",
"Presión arterial normal-alta",
"Hipertensión"))
ga <- ggplot(cardio_clean, aes(group_age)) + geom_bar(fill='grey') +
xlab("Edad Discretizada")
gh <- ggplot(cardio_clean, aes(group_height)) + geom_bar(fill='blue') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Altura Discretizada")
gw <- ggplot(cardio_clean, aes(group_weight)) + geom_bar(fill='pink') +
xlab("Peso Discretizada")
gi <- ggplot(cardio_clean, aes(group_imc)) + geom_bar(fill='lightblue') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("IMC Discretizada")
ghy <- ggplot(cardio_clean, aes(hypertension)) + geom_bar(fill='green') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Hipertensión Discretizada")
ge <- ggplot(cardio_clean, aes(gender)) + geom_bar(fill='cadetblue3') +
xlab("Género")
ch <- ggplot(cardio_clean, aes(cholesterol)) + geom_bar(fill='red') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Colesterol")
gl <- ggplot(cardio_clean, aes(glucose)) + geom_bar(fill='purple') +
theme(axis.text.x = element_text(angle = 25, hjust=1)) +
xlab("Glucosa")
sm <- ggplot(cardio_clean, aes(smoking)) + geom_bar(fill='yellow') +
xlab("Fumador")
ai <- ggplot(cardio_clean, aes(alcohol_intake)) + geom_bar(fill='brown') +
xlab("Ingesta de alcohol")
pa <- ggplot(cardio_clean, aes(physical_activity)) + geom_bar(fill='orange') +
xlab("Actividad física")
# Variable objetivo
cd <- ggplot(cardio_clean, aes(cardiovascular_disease)) +
geom_bar(fill='aquamarine4') +
xlab("Enfermedad Cardiovascular")
ggarrange(ga,gh,gw,gi,ghy,ge,ch,gl,sm,ai,pa,cd, ncol = 2)
# Establecemos el valor por defecto de alpha
alpha = 0.05
col.names = colnames(cardio_clean)
for (i in 1:ncol(cardio_clean)) {
if (i == 1) cat("Variables que no siguen una distribución normal:\n")
if (is.integer(cardio_clean[,i]) | is.numeric(cardio_clean[,i])) {
# Como nuestro conjunto de datos es grande, utilizaremos la prueba de
# Kolmogorov-Simirnov
p_val = lillie.test(cardio_clean[,i])$p.value
if (p_val < alpha) {
cat(col.names[i])
# Establecemos cómo queremos ver la salida que muestra el bucle
if (i < ncol(cardio_clean) - 1) cat(", ")
if (i %% 3 == 0) cat("\n")
}
}
}
# Prueba para las variables blood_pressure y group_imc
fligner.test(imc ~ group_imc, data = cardio_clean)
var.test(cardio_clean$imc[cardio_clean$gender=="Mujer"],
cardio_clean$imc[cardio_clean$gender=="Hombre"],
alternative = "two.sided", conf.level = 0.95)
t.test(cardio_clean$imc[cardio_clean$gender=="Mujer"],
cardio_clean$imc[cardio_clean$gender=="Hombre"],
alternative="two.sided", var.equal=FALSE, conf.level = 0.95)
t.test(cardio_clean$imc[cardio_clean$gender=="Hombre"],
cardio_clean$imc[cardio_clean$gender=="Mujer"],
alternative="greater", var.equal=FALSE, conf.level = 0.95)
var.test(cardio_clean$blood_pressure[
cardio_clean$cardiovascular_disease=="Sí"],
cardio_clean$blood_pressure[
cardio_clean$cardiovascular_disease=="No"],
alternative = "two.sided", conf.level = 0.95)
t.test(cardio_clean$blood_pressure[cardio_clean$cardiovascular_disease=="Sí"],
cardio_clean$blood_pressure[cardio_clean$cardiovascular_disease=="No"],
alternative="greater", var.equal=FALSE, conf.level = 0.95)
# Elegimos 2/3 para el conjunto de entrenamiento
smp_size <- floor(2/3 * nrow(cardio_clean))
# Establecemos la semilla  para que el ejemplo sea reproducible
set.seed(222)
train_ind <- sample(seq_len(nrow(cardio_clean)), size = smp_size)
# Establecemos lo conjuntos de entrenamiento y prueba
cardio_train <- cardio_clean[train_ind, ]
cardio_test <- cardio_clean[-train_ind, ]
lm1 <- lm(age~cardiovascular_disease, data=cardio_train)
lm2 <- lm(age~cardiovascular_disease+height, data=cardio_train)
lm3 <- lm(age~cardiovascular_disease+height+weight, data=cardio_train)
lm4 <- lm(age~cardiovascular_disease+smoking+height+weight, data=cardio_train)
lm5 <- lm(age~cardiovascular_disease+gender+smoking++height+weight, data=cardio_train)
library(performance)
comp <- compare_performance(lm1, lm2, lm3, lm4, lm5)
comp
library(see)
plot(comp)
lm1 <- lm(age~cardiovascular_disease, data=cardio_train)
lm2 <- lm(age~cardiovascular_disease+height, data=cardio_train)
lm3 <- lm(age~cardiovascular_disease+height+weight, data=cardio_train)
lm4 <- lm(age~cardiovascular_disease+smoking+height+weight, data=cardio_train)
lm5 <- lm(age~cardiovascular_disease+gender+smoking+height+weight, data=cardio_train)
library(performance)
comp <- compare_performance(lm1, lm2, lm3, lm4, lm5)
comp
library(see)
plot(comp)
# Warning: When comparing models, please note that probably not all models were
# fit from ame data.
lm1 <- lm(age~cardiovascular_disease, data=cardio_train)
lm2 <- lm(age~cardiovascular_disease+height, data=cardio_train)
lm3 <- lm(age~cardiovascular_disease+height+weight, data=cardio_train)
lm4 <- lm(age~cardiovascular_disease+smoking+height+weight, data=cardio_train)
lm5 <- lm(age~cardiovascular_disease+gender+smoking+height+
weight, data=cardio_train)
library(performance)
comp <- compare_performance(lm1, lm2, lm3, lm4, lm5)
comp
library(see)
plot(comp)
# Realizamos la regresión
logit_model <- glm(formula=cardiovascular_disease~age+gender+smoking+
physical_activity+group_imc+glucose+alcohol_intake+
hypertension+cholesterol, data=cardio_train,
family=binomial)
# Estadísticas del modelo
summary(logit_model)
summary(lm5)
pairs(cardio_clean)
cor(cardio_clean)
hetcor(cardio_clean)
# Equivalent with a formula
pairs(~ age + height + weight + systolic_blood_presuer, data = cardio_clean)
# Equivalent with a formula
pairs(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean)
# Equivalent but using the plot function
plot(data)
# Equivalent with a formula
pairs(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean, labels = colnames(data),  # Variable names
pch = 21,                 # Pch symbol
bg = rainbow(3)[groups],  # Background color of the symbol (pch 21 to 25)
col = rainbow(3)[groups], # Border color of the symbol
main = "Iris dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1))
# Equivalent with a formula
pairs(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean, labels = colnames(cardio_clean),  # Variable names
pch = 21,                 # Pch symbol
bg = rainbow(2)[groups],  # Background color of the symbol (pch 21 to 25)
col = rainbow(2)[groups], # Border color of the symbol
main = "Iris dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1))
# Equivalent with a formula
pairs(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean, labels = colnames(cardio_clean),  # Variable names
pch = 21,                 # Pch symbol
bg = rainbow(2)[groups],  # Background color of the symbol (pch 21 to 25)
col = rainbow(2)[groups], # Border color of the symbol
main = "Iris dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)
# Equivalent with a formula
pairs(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean,   # Variable names
pch = 21,                 # Pch symbol
bg = rainbow(2)[groups],  # Background color of the symbol (pch 21 to 25)
col = rainbow(2)[groups], # Border color of the symbol
main = "Iris dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)
# Equivalent with a formula
pairs(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean,   # Variable names
pch = 21,      # Background color of the symbol (pch 21 to 25)
col = rainbow(2)[groups], # Border color of the symbol
main = "Iris dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)
# Equivalent with a formula
pairs(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean,   # Variable names
pch = 21,    # Border color of the symbol
main = "Iris dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)
cor(cardio_clean, use="pairwise.complete.obs")
mutate_if(cardio_clean, is.factor, ~ as.numeric(levels(.x))[.x])
cor(cardio_clean, use="pairwise.complete.obs")
cardio_num <- mutate_if(cardio_clean, is.factor, ~ as.numeric(levels(.x))[.x])
cor(cardio_num)
cor(~ age + height + weight + diastolic_blood_pressure, data = cardio_clean)
